(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{291:function(t,e,a){"use strict";a.r(e);var s=a(6),r=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-回滚","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 回滚")]),t._v(" "),a("p",[t._v("由于提交的代码会处于不同的位置：工作区，暂存区，只在本地提交commit 和 已推送到远程的 commit。 本文对处于不同位置的回滚，进行了区分和采取对应的回滚方法。")]),t._v(" "),a("h2",{attrs:{id:"一、清空工作区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、清空工作区","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、清空工作区")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete tracked files")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- filename\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("这里只回滚了以前跟踪过的文件，reset --hard 也同理"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete untracked")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -n\t\t\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看没被跟踪的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -n -d\t    \t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看没被跟踪的文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -f \t\t     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除与 git clean -n 对应的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -f -d          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除与 git clean -nd 对应的文件")]),t._v("\n")])])]),a("p",[a("a",{attrs:{href:"#discard-local-changes"}},[t._v("discard-local-changes")])]),t._v(" "),a("h2",{attrs:{id:"二、只在本地提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、只在本地提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、只在本地提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#用于还没push到远程，可以清除commit记录                  \ngit reset --[] <revision>\n                    head   暂存区  工作区\n    reset --hard    回退     回退   回退\n    reset --mixed   回退     回退   \n    reset --soft    回退     \n")])])]),a("pre",[t._v("只回退head:\n会导致原本干净的工作区多了Modify...\n如果commit 这些modify 相当于head又前进到之前版本\n同时回退工作区的意思就是清空这些Modify...\n")]),t._v(" "),a("h2",{attrs:{id:"三、已推送到远程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、已推送到远程","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、已推送到远程")]),t._v(" "),a("p",[t._v("使用 revert，它会带来新的 commit 记录。")]),t._v(" "),a("p",[t._v("revert 与 reset 不同的地方除了用于回滚处于不同的位置的commit。")]),t._v(" "),a("p",[t._v("reset 命令的结果是回滚 revision 之后提交。而 revert 命令的结果是 revision 对应的 commit 和 revision 之后的 commits 都会被回滚.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("revision"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("在 "),a("code",[t._v("sourcetree")]),t._v(" 软件上使用如下\n"),a("img",{attrs:{src:"http://img.yuweixi.cn/17-5-23/89824937-file_1495506054361_aaad.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("git push --force 也可以回滚，但它并不安全，可能会把别人 commit 也回滚掉，一般不建议使用")])]),t._v(" "),a("h2",{attrs:{id:"四、git-reflog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、git-reflog","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、git-reflog")]),t._v(" "),a("p",[t._v("有些指令，如 "),a("code",[t._v("git rebase")]),t._v(" 和 "),a("code",[t._v("git reset [commitId] --hard")]),t._v("，执行后，在 "),a("code",[t._v("git log")]),t._v(" 是找不到的。这时就需要用到 "),a("code",[t._v("git-reflog")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reflog\ngit checkout <commitId>\n")])])]),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("stackoverflow.com/how-to-remove-local-untracked-files-from-the-current-git-working-tree"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.open-open.com/lib/view/open1397013992747.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.open-open.com/lib/view/open1397013992747.html"),a("OutboundLink")],1)])])},[],!1,null,null,null);e.default=r.exports}}]);